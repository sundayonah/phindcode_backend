// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sundayonah/phindcode_backend/ent/post"
	"github.com/sundayonah/phindcode_backend/ent/predicate"
	"github.com/sundayonah/phindcode_backend/ent/share"
)

// ShareUpdate is the builder for updating Share entities.
type ShareUpdate struct {
	config
	hooks    []Hook
	mutation *ShareMutation
}

// Where appends a list predicates to the ShareUpdate builder.
func (su *ShareUpdate) Where(ps ...predicate.Share) *ShareUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUserID sets the "user_id" field.
func (su *ShareUpdate) SetUserID(s string) *ShareUpdate {
	su.mutation.SetUserID(s)
	return su
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (su *ShareUpdate) SetNillableUserID(s *string) *ShareUpdate {
	if s != nil {
		su.SetUserID(*s)
	}
	return su
}

// SetShareTo sets the "share_to" field.
func (su *ShareUpdate) SetShareTo(s string) *ShareUpdate {
	su.mutation.SetShareTo(s)
	return su
}

// SetNillableShareTo sets the "share_to" field if the given value is not nil.
func (su *ShareUpdate) SetNillableShareTo(s *string) *ShareUpdate {
	if s != nil {
		su.SetShareTo(*s)
	}
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *ShareUpdate) SetCreatedAt(t time.Time) *ShareUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *ShareUpdate) SetNillableCreatedAt(t *time.Time) *ShareUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetPostID sets the "post" edge to the Post entity by ID.
func (su *ShareUpdate) SetPostID(id int) *ShareUpdate {
	su.mutation.SetPostID(id)
	return su
}

// SetPost sets the "post" edge to the Post entity.
func (su *ShareUpdate) SetPost(p *Post) *ShareUpdate {
	return su.SetPostID(p.ID)
}

// Mutation returns the ShareMutation object of the builder.
func (su *ShareUpdate) Mutation() *ShareMutation {
	return su.mutation
}

// ClearPost clears the "post" edge to the Post entity.
func (su *ShareUpdate) ClearPost() *ShareUpdate {
	su.mutation.ClearPost()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ShareUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ShareUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ShareUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ShareUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *ShareUpdate) check() error {
	if v, ok := su.mutation.UserID(); ok {
		if err := share.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "Share.user_id": %w`, err)}
		}
	}
	if v, ok := su.mutation.ShareTo(); ok {
		if err := share.ShareToValidator(v); err != nil {
			return &ValidationError{Name: "share_to", err: fmt.Errorf(`ent: validator failed for field "Share.share_to": %w`, err)}
		}
	}
	if su.mutation.PostCleared() && len(su.mutation.PostIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Share.post"`)
	}
	return nil
}

func (su *ShareUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(share.Table, share.Columns, sqlgraph.NewFieldSpec(share.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UserID(); ok {
		_spec.SetField(share.FieldUserID, field.TypeString, value)
	}
	if value, ok := su.mutation.ShareTo(); ok {
		_spec.SetField(share.FieldShareTo, field.TypeString, value)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(share.FieldCreatedAt, field.TypeTime, value)
	}
	if su.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   share.PostTable,
			Columns: []string{share.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   share.PostTable,
			Columns: []string{share.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{share.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ShareUpdateOne is the builder for updating a single Share entity.
type ShareUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShareMutation
}

// SetUserID sets the "user_id" field.
func (suo *ShareUpdateOne) SetUserID(s string) *ShareUpdateOne {
	suo.mutation.SetUserID(s)
	return suo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (suo *ShareUpdateOne) SetNillableUserID(s *string) *ShareUpdateOne {
	if s != nil {
		suo.SetUserID(*s)
	}
	return suo
}

// SetShareTo sets the "share_to" field.
func (suo *ShareUpdateOne) SetShareTo(s string) *ShareUpdateOne {
	suo.mutation.SetShareTo(s)
	return suo
}

// SetNillableShareTo sets the "share_to" field if the given value is not nil.
func (suo *ShareUpdateOne) SetNillableShareTo(s *string) *ShareUpdateOne {
	if s != nil {
		suo.SetShareTo(*s)
	}
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *ShareUpdateOne) SetCreatedAt(t time.Time) *ShareUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *ShareUpdateOne) SetNillableCreatedAt(t *time.Time) *ShareUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetPostID sets the "post" edge to the Post entity by ID.
func (suo *ShareUpdateOne) SetPostID(id int) *ShareUpdateOne {
	suo.mutation.SetPostID(id)
	return suo
}

// SetPost sets the "post" edge to the Post entity.
func (suo *ShareUpdateOne) SetPost(p *Post) *ShareUpdateOne {
	return suo.SetPostID(p.ID)
}

// Mutation returns the ShareMutation object of the builder.
func (suo *ShareUpdateOne) Mutation() *ShareMutation {
	return suo.mutation
}

// ClearPost clears the "post" edge to the Post entity.
func (suo *ShareUpdateOne) ClearPost() *ShareUpdateOne {
	suo.mutation.ClearPost()
	return suo
}

// Where appends a list predicates to the ShareUpdate builder.
func (suo *ShareUpdateOne) Where(ps ...predicate.Share) *ShareUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ShareUpdateOne) Select(field string, fields ...string) *ShareUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Share entity.
func (suo *ShareUpdateOne) Save(ctx context.Context) (*Share, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ShareUpdateOne) SaveX(ctx context.Context) *Share {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ShareUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ShareUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *ShareUpdateOne) check() error {
	if v, ok := suo.mutation.UserID(); ok {
		if err := share.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "Share.user_id": %w`, err)}
		}
	}
	if v, ok := suo.mutation.ShareTo(); ok {
		if err := share.ShareToValidator(v); err != nil {
			return &ValidationError{Name: "share_to", err: fmt.Errorf(`ent: validator failed for field "Share.share_to": %w`, err)}
		}
	}
	if suo.mutation.PostCleared() && len(suo.mutation.PostIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Share.post"`)
	}
	return nil
}

func (suo *ShareUpdateOne) sqlSave(ctx context.Context) (_node *Share, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(share.Table, share.Columns, sqlgraph.NewFieldSpec(share.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Share.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, share.FieldID)
		for _, f := range fields {
			if !share.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != share.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UserID(); ok {
		_spec.SetField(share.FieldUserID, field.TypeString, value)
	}
	if value, ok := suo.mutation.ShareTo(); ok {
		_spec.SetField(share.FieldShareTo, field.TypeString, value)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(share.FieldCreatedAt, field.TypeTime, value)
	}
	if suo.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   share.PostTable,
			Columns: []string{share.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   share.PostTable,
			Columns: []string{share.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Share{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{share.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
